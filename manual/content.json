{
  "id": "lens_manual",
  "schema": [
    "substance-article",
    "0.3.0"
  ],
  "nodes": {
    "document": {
      "type": "document",
      "id": "document",
      "views": [
        "content"
      ],
      "guid": "lens_manual",
      "creator": "",
      "authors": [],
      "title": "Lens Manual - Official Manual for eLife Lens",
      "abstract": "",
      "published_on": "2014-01-03T00:00:00.000Z",
      "meta": {},
      "updated_at": "2014-02-24T18:55:49.010Z"
    },
    "content": {
      "type": "view",
      "id": "content",
      "nodes": [
        "cover",
        "header_1",
        "text_2",
        "header_2",
        "text_3",
        "header_3",
        "text_4",
        "text_5",
        "text_6",
        "text_7",
        "list_1",
        "header_4",
        "text_10",
        "text_11",
        "header_5",
        "text_13",
        "header_6",
        "text_15",
        "text_17",
        "codeblock_1",
        "text_18",
        "header_7",
        "text_19",
        "text_20",
        "codeblock_2",
        "text_21",
        "header_8",
        "text_22",
        "header_9",
        "list_2",
        "text_25",
        "header_10",
        "text_26",
        "codeblock_3",
        "text_27",
        "codeblock_4",
        "text_28",
        "codeblock_5",
        "text_29",
        "codeblock_6",
        "text_30",
        "header_11",
        "text_31",
        "codeblock_7",
        "text_32",
        "codeblock_8",
        "header_12",
        "text_33",
        "codeblock_9",
        "text_34",
        "header_13",
        "text_35",
        "codeblock_10",
        "text_36",
        "codeblock_11",
        "text_37",
        "codeblock_12",
        "text_38",
        "text_39",
        "codeblock_13",
        "text_40",
        "header_14",
        "text_41",
        "text_42",
        "codeblock_14",
        "text_43"
      ]
    },
    "figures": {
      "type": "view",
      "id": "figures",
      "nodes": []
    },
    "citations": {
      "type": "view",
      "id": "citations",
      "nodes": []
    },
    "info": {
      "type": "view",
      "id": "info",
      "nodes": []
    },
    "errors": {
      "type": "view",
      "id": "errors",
      "nodes": []
    },
    "remarks": {
      "type": "view",
      "id": "remarks",
      "nodes": []
    },
    "header_1": {
      "type": "heading",
      "id": "header_1",
      "source_id": "introduction",
      "content": "Introduction",
      "level": 1
    },
    "text_2": {
      "type": "text",
      "id": "text_2",
      "source_id": "",
      "content": "eLife Lens provides a novel way of looking at content on the web. It is designed to make life easier for researchers, reviewers, authors and readers. For example, have you tried to look at a figure in an online article, while at the same time trying to see what the author says about the figure? You end up jumping all around the article, losing track of what you were looking for in the first place. The reason for this is that most online research articles are published in a fixed digital version of the original paper. With eLife Lens, we take full advantage of the Internetâ€™s flexibility."
    },
    "header_2": {
      "type": "heading",
      "id": "header_2",
      "source_id": "the-big-picture",
      "content": "The Big Picture",
      "level": 2
    },
    "text_3": {
      "type": "text",
      "id": "text_3",
      "source_id": "",
      "content": "Lens has a pretty simple architecture. It is a stand-alone web component that can be embedded into any web page. Lens can display any NLM XML document or, alternatively, the Lens-native JSON representation. What's important to note is that Lens doesn't dictate a specific architecture for content hosting. Anyone (even authors) can host their own documents and customized Lens instances."
    },
    "header_3": {
      "type": "heading",
      "id": "header_3",
      "source_id": "the-lens-article-format",
      "content": "The Lens Article Format",
      "level": 2
    },
    "text_4": {
      "type": "text",
      "id": "text_4",
      "source_id": "",
      "content": "The Lens Article Format is an implementation of the Substance Document Model, dedicated to scientific content. It features basic content types such as paragraphs and headings, as well as figure types such as images, tables and videos complete with captions and cross-references."
    },
    "text_5": {
      "type": "text",
      "id": "text_5",
      "source_id": "",
      "content": "The document definitions can easily be extended. You can either create your own flavour or contribute to the Lens Article Format directly. We have auto-generated documentation for the latest Lens Article spec."
    },
    "text_6": {
      "type": "text",
      "id": "text_6",
      "source_id": "",
      "content": "Do we really need another spec for scientific documents?"
    },
    "text_7": {
      "type": "text",
      "id": "text_7",
      "source_id": "",
      "content": "Yes, we believe so for the following reasons:"
    },
    "text_8": {
      "type": "text",
      "id": "text_8",
      "source_id": "",
      "content": "XML-based formats such as NLM are hard to consume by web clients."
    },
    "text_9": {
      "type": "text",
      "id": "text_9",
      "source_id": "",
      "content": "Strict separation of content and style is important. Existing formats target print, and thus contain style information which makes them hard to process by computer programs."
    },
    "list_1": {
      "type": "list",
      "id": "list_1",
      "source_id": "",
      "items": [
        "text_8",
        "text_9"
      ],
      "ordered": false
    },
    "header_4": {
      "type": "heading",
      "id": "header_4",
      "source_id": "nodes",
      "content": "Nodes",
      "level": 3
    },
    "text_10": {
      "type": "text",
      "id": "text_10",
      "source_id": "",
      "content": "Lens articles are data-centric representations of digital content. Each content element lives as a node in a flat address space, identified by a unique id. Think of it as a database of independent content fragments."
    },
    "text_11": {
      "type": "text",
      "id": "text_11",
      "source_id": "",
      "content": "The following graphic shows a sample document containing a heading (h1), paragraph (p1), and formula (f1). It also has an image (i1) and a table (t1) as well as two citations (c1 and c2)."
    },
    "text_12": {
      "type": "text",
      "id": "text_12",
      "source_id": "",
      "content": ""
    },
    "header_5": {
      "type": "heading",
      "id": "header_5",
      "source_id": "views",
      "content": "Views",
      "level": 3
    },
    "text_13": {
      "type": "text",
      "id": "text_13",
      "source_id": "",
      "content": "Now these building blocks of a document are organized using views. The main body of the document is referenced in the content view. Figures (like images and tables) are kept in the figures view while citations live in citations respectively."
    },
    "text_14": {
      "type": "text",
      "id": "text_14",
      "source_id": "",
      "content": ""
    },
    "header_6": {
      "type": "heading",
      "id": "header_6",
      "source_id": "the-lens-converter",
      "content": "The Lens Converter",
      "level": 2
    },
    "text_15": {
      "type": "text",
      "id": "text_15",
      "source_id": "",
      "content": "Lens can natively read the JATS (formerly NLM) format, thanks to its built-in converter."
    },
    "text_16": {
      "type": "text",
      "id": "text_16",
      "source_id": "",
      "content": ""
    },
    "text_17": {
      "type": "text",
      "id": "text_17",
      "source_id": "",
      "content": "Conversion is done on the client side using the browser-native DOM Parser. Using it is simple:"
    },
    "codeblock_1": {
      "type": "codeblock",
      "id": "codeblock_1",
      "source_id": "",
      "content": "var importer = new LensImporter();\nvar doc = importer.import(xmlData, {\n  // this path is used to resolve relative figure urls\n  baseURL: \"http://docs.example.com/doc-25/\"\n});"
    },
    "text_18": {
      "type": "text",
      "id": "text_18",
      "source_id": "",
      "content": "The converter can handle any NLM-compatible file. Some portions are publisher-specific, such as when resolving the urls for figures and videos. This is done in configurations. We have implemented configurations for eLife, Landes Bioscience and PLOS."
    },
    "header_7": {
      "type": "heading",
      "id": "header_7",
      "source_id": "website-integration",
      "content": "Website Integration",
      "level": 1
    },
    "text_19": {
      "type": "text",
      "id": "text_19",
      "source_id": "",
      "content": "The easiest way to integrate Lens into your website is by creating one HTML file per document and adapting the url to the document you want to display."
    },
    "text_20": {
      "type": "text",
      "id": "text_20",
      "source_id": "",
      "content": "Just take the contents from the bundled distribution here, then adjust the document_url parameter in index.html."
    },
    "codeblock_2": {
      "type": "codeblock",
      "id": "codeblock_2",
      "source_id": "",
      "content": "// Endpoint must have CORS enabled, or file is served from the same domain as the app\nvar documentURL = \"https://s3.amazonaws.com/elife-cdn/elife-articles/00778/elife00778.xml\";\n\nvar app = new Lens({\n  document_url: documentURL\n});"
    },
    "text_21": {
      "type": "text",
      "id": "text_21",
      "source_id": "",
      "content": "Keep in mind, with eLife Lens you can display any NLM-compatible XML file or JSON document that conforms to the Lens Article spec. You can enrich your HTML file with <meta> tags etc. to ensure Google crawlablility. There is no server infrastructure needed to run Lens, as it is 100% browser-based. If you have questions, please consult the Lens Mailinglist."
    },
    "header_8": {
      "type": "heading",
      "id": "header_8",
      "source_id": "development-setup",
      "content": "Development Setup",
      "level": 1
    },
    "text_22": {
      "type": "text",
      "id": "text_22",
      "source_id": "",
      "content": "It's fairly easy to install and run the latest Lens development environment locally."
    },
    "header_9": {
      "type": "heading",
      "id": "header_9",
      "source_id": "prerequisites",
      "content": "Prerequisites",
      "level": 2
    },
    "text_23": {
      "type": "text",
      "id": "text_23",
      "source_id": "",
      "content": "Node.js >=0.8.x"
    },
    "text_24": {
      "type": "text",
      "id": "text_24",
      "source_id": "",
      "content": "Pandoc >= 1.12.1 (for on-the-fly generation of the Lens manual from Markdown)"
    },
    "list_2": {
      "type": "list",
      "id": "list_2",
      "source_id": "",
      "items": [
        "text_23",
        "text_24"
      ],
      "ordered": false
    },
    "text_25": {
      "type": "text",
      "id": "text_25",
      "source_id": "",
      "content": "Node.js is just used as a development environment. You'll soon be able to create self-contained packages of individual modules or the main app itself."
    },
    "header_10": {
      "type": "heading",
      "id": "header_10",
      "source_id": "fresh-install-of-dev-environment",
      "content": "Fresh install of dev environment",
      "level": 2
    },
    "text_26": {
      "type": "text",
      "id": "text_26",
      "source_id": "",
      "content": "First install the Substance Screwdriver command line utility. It's just a little helper that makes dealing with our many modules easier."
    },
    "codeblock_3": {
      "type": "codeblock",
      "id": "codeblock_3",
      "source_id": "",
      "content": "$ git clone https://github.com/substance/screwdriver.git\n$ cd screwdriver\n$ sudo python setup.py install"
    },
    "text_27": {
      "type": "text",
      "id": "text_27",
      "source_id": "",
      "content": "Clone the Lens repository"
    },
    "codeblock_4": {
      "type": "codeblock",
      "id": "codeblock_4",
      "source_id": "",
      "content": "$ git clone https://github.com/elifesciences/lens.git"
    },
    "text_28": {
      "type": "text",
      "id": "text_28",
      "source_id": "",
      "content": "Run the update command, which pulls in all the sub-modules and dependencies"
    },
    "codeblock_5": {
      "type": "codeblock",
      "id": "codeblock_5",
      "source_id": "",
      "content": "$ cd lens\n$ substance --update"
    },
    "text_29": {
      "type": "text",
      "id": "text_29",
      "source_id": "",
      "content": "Finally start the server"
    },
    "codeblock_6": {
      "type": "codeblock",
      "id": "codeblock_6",
      "source_id": "",
      "content": "$ substance"
    },
    "text_30": {
      "type": "text",
      "id": "text_30",
      "source_id": "",
      "content": "You can have a look at the example document by pointing your browser to http://localhost:4001."
    },
    "header_11": {
      "type": "heading",
      "id": "header_11",
      "source_id": "keep-your-local-version-in-sync",
      "content": "Keep your local version in sync",
      "level": 2
    },
    "text_31": {
      "type": "text",
      "id": "text_31",
      "source_id": "",
      "content": "You may want to pull in updates every now and then, which is simple. In the Lens project root dir do:"
    },
    "codeblock_7": {
      "type": "codeblock",
      "id": "codeblock_7",
      "source_id": "",
      "content": "$ substance --update"
    },
    "text_32": {
      "type": "text",
      "id": "text_32",
      "source_id": "",
      "content": "And start the dev environment again."
    },
    "codeblock_8": {
      "type": "codeblock",
      "id": "codeblock_8",
      "source_id": "",
      "content": "$ substance"
    },
    "header_12": {
      "type": "heading",
      "id": "header_12",
      "source_id": "bundling",
      "content": "Bundling",
      "level": 1
    },
    "text_33": {
      "type": "text",
      "id": "text_33",
      "source_id": "",
      "content": "You can easily create a bundle (JS+CSS) of the source files by utilizing the Substance Screwdriver."
    },
    "codeblock_9": {
      "type": "codeblock",
      "id": "codeblock_9",
      "source_id": "",
      "content": "$ substance --bundle"
    },
    "text_34": {
      "type": "text",
      "id": "text_34",
      "source_id": "",
      "content": "If run successfully you can find your bundled Lens in the dist folder."
    },
    "header_13": {
      "type": "heading",
      "id": "header_13",
      "source_id": "contributing",
      "content": "Contributing",
      "level": 1
    },
    "text_35": {
      "type": "text",
      "id": "text_35",
      "source_id": "",
      "content": "The first thing to do is creating a fork of the lens repository and all modules you'd like to make changes for. Make a fresh clone of your forked Lens."
    },
    "codeblock_10": {
      "type": "codeblock",
      "id": "codeblock_10",
      "source_id": "",
      "content": "$ git clone https://github.com/your_user/lens.git"
    },
    "text_36": {
      "type": "text",
      "id": "text_36",
      "source_id": "",
      "content": "Then update the project.json file in your main repo accordingly. Assume you want to make updates to the Lens Article module you'd have to update the following entries:"
    },
    "codeblock_11": {
      "type": "codeblock",
      "id": "codeblock_11",
      "source_id": "",
      "content": "\"modules\": [\n  ... \n  {\n    \"repository\": \"https://github.com/your_user/lens-converter.git\",\n    \"folder\": \"node_modules/lens-converter\",\n    \"branch\": \"0.3.x\"\n  },\n  ... \n  {\n    \"repository\": \"https://github.com/your_user/lens.git\",\n    \"folder\": \".\",\n    \"branch\": \"1.0.x\"\n  }\n]"
    },
    "text_37": {
      "type": "text",
      "id": "text_37",
      "source_id": "",
      "content": "Finally, pull in all the modules."
    },
    "codeblock_12": {
      "type": "codeblock",
      "id": "codeblock_12",
      "source_id": "",
      "content": "$ substance --update"
    },
    "text_38": {
      "type": "text",
      "id": "text_38",
      "source_id": "",
      "content": "And run the Lens dev environment"
    },
    "text_39": {
      "type": "text",
      "id": "text_39",
      "source_id": "",
      "content": "Now say you've made changes to the Lens.Article module. In order to commit them you simply have to navigate to node_modules/lens-article and do:"
    },
    "codeblock_13": {
      "type": "codeblock",
      "id": "codeblock_13",
      "source_id": "",
      "content": "$ git add <YOUR STUFF>\n$ git commit -m \"Fixed X\"\n$ git push"
    },
    "text_40": {
      "type": "text",
      "id": "text_40",
      "source_id": "",
      "content": "Then go to Github and submit a pull request."
    },
    "header_14": {
      "type": "heading",
      "id": "header_14",
      "source_id": "adjusting-styles",
      "content": "Adjusting styles",
      "level": 2
    },
    "text_41": {
      "type": "text",
      "id": "text_41",
      "source_id": "",
      "content": "Most customization can be done using CSS without interfering with the Lens codebase. You only override styles on the application level."
    },
    "text_42": {
      "type": "text",
      "id": "text_42",
      "source_id": "",
      "content": "Say you'd like to like to color citation cards red."
    },
    "codeblock_14": {
      "type": "codeblock",
      "id": "codeblock_14",
      "source_id": "",
      "content": "#my_app .article .citations .resource-header {\n  background: red;\n}"
    },
    "text_43": {
      "type": "text",
      "id": "text_43",
      "source_id": "",
      "content": "You've got the basic idea, now it's on you. It should be easy to pull in changes from the official Lens modules without breaking your customized app."
    },
    "link_2": {
      "type": "link",
      "id": "link_2",
      "path": [
        "text_2",
        "content"
      ],
      "range": [
        0,
        10
      ],
      "url": "http://lens.elifesciences.org"
    },
    "link_3": {
      "type": "link",
      "id": "link_3",
      "path": [
        "text_4",
        "content"
      ],
      "range": [
        52,
        76
      ],
      "url": "http://github.com/substance/document"
    },
    "link_4": {
      "type": "link",
      "id": "link_4",
      "path": [
        "text_5",
        "content"
      ],
      "range": [
        191,
        208
      ],
      "url": "http://lens.elifesciences.org/lens_article/"
    },
    "code_1": {
      "type": "code",
      "id": "code_1",
      "path": [
        "text_11",
        "content"
      ],
      "range": [
        68,
        70
      ]
    },
    "code_2": {
      "type": "code",
      "id": "code_2",
      "path": [
        "text_11",
        "content"
      ],
      "range": [
        84,
        86
      ]
    },
    "code_3": {
      "type": "code",
      "id": "code_3",
      "path": [
        "text_11",
        "content"
      ],
      "range": [
        102,
        104
      ]
    },
    "code_4": {
      "type": "code",
      "id": "code_4",
      "path": [
        "text_11",
        "content"
      ],
      "range": [
        129,
        131
      ]
    },
    "code_5": {
      "type": "code",
      "id": "code_5",
      "path": [
        "text_11",
        "content"
      ],
      "range": [
        146,
        148
      ]
    },
    "code_6": {
      "type": "code",
      "id": "code_6",
      "path": [
        "text_11",
        "content"
      ],
      "range": [
        176,
        178
      ]
    },
    "code_7": {
      "type": "code",
      "id": "code_7",
      "path": [
        "text_11",
        "content"
      ],
      "range": [
        183,
        185
      ]
    },
    "code_8": {
      "type": "code",
      "id": "code_8",
      "path": [
        "text_13",
        "content"
      ],
      "range": [
        118,
        125
      ]
    },
    "code_9": {
      "type": "code",
      "id": "code_9",
      "path": [
        "text_13",
        "content"
      ],
      "range": [
        181,
        188
      ]
    },
    "code_10": {
      "type": "code",
      "id": "code_10",
      "path": [
        "text_13",
        "content"
      ],
      "range": [
        218,
        227
      ]
    },
    "link_5": {
      "type": "link",
      "id": "link_5",
      "path": [
        "text_15",
        "content"
      ],
      "range": [
        27,
        31
      ],
      "url": "http://jats.nlm.nih.gov/"
    },
    "link_6": {
      "type": "link",
      "id": "link_6",
      "path": [
        "text_15",
        "content"
      ],
      "range": [
        78,
        87
      ],
      "url": "http://github.com/elifesciences/lens-converter"
    },
    "link_7": {
      "type": "link",
      "id": "link_7",
      "path": [
        "text_17",
        "content"
      ],
      "range": [
        63,
        73
      ],
      "url": "http://www.w3.org/TR/2003/WD-DOM-Level-3-LS-20030619/load-save.html#LS-DOMParser"
    },
    "link_8": {
      "type": "link",
      "id": "link_8",
      "path": [
        "text_18",
        "content"
      ],
      "range": [
        215,
        220
      ],
      "url": "https://github.com/elifesciences/lens-converter/blob/0.3.x/src/configurations/elife.js"
    },
    "link_9": {
      "type": "link",
      "id": "link_9",
      "path": [
        "text_18",
        "content"
      ],
      "range": [
        222,
        239
      ],
      "url": "https://github.com/elifesciences/lens-converter/blob/0.3.x/src/configurations/landes.js"
    },
    "link_10": {
      "type": "link",
      "id": "link_10",
      "path": [
        "text_18",
        "content"
      ],
      "range": [
        244,
        248
      ],
      "url": "https://github.com/elifesciences/lens-converter/blob/0.3.x/src/configurations/plos.js"
    },
    "link_11": {
      "type": "link",
      "id": "link_11",
      "path": [
        "text_20",
        "content"
      ],
      "range": [
        32,
        52
      ],
      "url": "http://lens.elifesciences.org/lens-1.0.0.zip"
    },
    "code_11": {
      "type": "code",
      "id": "code_11",
      "path": [
        "text_20",
        "content"
      ],
      "range": [
        75,
        87
      ]
    },
    "code_12": {
      "type": "code",
      "id": "code_12",
      "path": [
        "text_20",
        "content"
      ],
      "range": [
        101,
        111
      ]
    },
    "code_13": {
      "type": "code",
      "id": "code_13",
      "path": [
        "text_21",
        "content"
      ],
      "range": [
        166,
        172
      ]
    },
    "link_12": {
      "type": "link",
      "id": "link_12",
      "path": [
        "text_21",
        "content"
      ],
      "range": [
        340,
        356
      ],
      "url": "https://groups.google.com/forum/#!forum/elife-lens"
    },
    "link_13": {
      "type": "link",
      "id": "link_13",
      "path": [
        "text_24",
        "content"
      ],
      "range": [
        0,
        6
      ],
      "url": "http://johnmacfarlane.net/pandoc/installing.html"
    },
    "code_14": {
      "type": "code",
      "id": "code_14",
      "path": [
        "text_30",
        "content"
      ],
      "range": [
        72,
        93
      ]
    },
    "code_15": {
      "type": "code",
      "id": "code_15",
      "path": [
        "text_34",
        "content"
      ],
      "range": [
        58,
        62
      ]
    },
    "code_16": {
      "type": "code",
      "id": "code_16",
      "path": [
        "text_36",
        "content"
      ],
      "range": [
        16,
        28
      ]
    },
    "code_17": {
      "type": "code",
      "id": "code_17",
      "path": [
        "text_39",
        "content"
      ],
      "range": [
        111,
        136
      ]
    },
    "link_14": {
      "type": "link",
      "id": "link_14",
      "path": [
        "text_40",
        "content"
      ],
      "range": [
        11,
        17
      ],
      "url": "http://github.com"
    },
    "code_18": {
      "type": "code",
      "id": "code_18",
      "path": [
        "text_45",
        "content"
      ],
      "range": [
        96,
        99
      ]
    },
    "code_19": {
      "type": "code",
      "id": "code_19",
      "path": [
        "text_45",
        "content"
      ],
      "range": [
        219,
        231
      ]
    },
    "code_20": {
      "type": "code",
      "id": "code_20",
      "path": [
        "text_45",
        "content"
      ],
      "range": [
        243,
        253
      ]
    },
    "code_22": {
      "type": "code",
      "id": "code_22",
      "path": [
        "text_47",
        "content"
      ],
      "range": [
        55,
        58
      ]
    },
    "code_23": {
      "type": "code",
      "id": "code_23",
      "path": [
        "text_47",
        "content"
      ],
      "range": [
        90,
        101
      ]
    },
    "code_25": {
      "type": "code",
      "id": "code_25",
      "path": [
        "text_49",
        "content"
      ],
      "range": [
        36,
        44
      ]
    },
    "code_26": {
      "type": "code",
      "id": "code_26",
      "path": [
        "text_50",
        "content"
      ],
      "range": [
        51,
        65
      ]
    },
    "cover": {
      "type": "cover",
      "id": "cover",
      "source_id": "",
      "image": ""
    }
  }
}